Vue.js
Framework de JS 
solo parte de JS para interface de usuario
Basada en componentes
Se puede instalar con VITE

-Single file components
Cada componente tiene 3 partes
SFC --> <script> <style> <template>

En <script> se coloca toda la lógica de JS del componente
En <style> se coloca el código css del componente
En <template> se coloca todo el código HTML del componente
No es obligatorio que los componente tengan las 3 partes

Si style tiene la palabra "scope" al lado, los estilos css dentro solo se aplican al template de este componente, si se le quita le puede aplicar los estilos a diversos componentes 

-Instalación de tailwindcss, postcss y autoprefixer en el package.json
npm install -D tailwindcss postcss autoprefixer

-Crear 2 archivos, uno de postcss.config y uno de tailwindcss.config
npx tailwindcss init -p

-En Vue, si puedes darle clases a los elementos con "class", en comparación a React que utiliza "classname"

-Componentes en Vue
te permiten dividir tu código en partes reutilizables
los componentes utilizan la extensión .vue y se importan con un import de JS
con <script setup> cualquier componente que es importado se hacen disponibles en el template
Se pueden pasar información de un componente a otro con Props

-API styles
2 APIS: Options API y Composition API
Options API tu aplicación utiliza una sintaxis de tipo objetos
Composition API se definen los componentes utilizando imports escribiendo las funciones directamente en el componente
Cuando <script> tiene el "setup" al lado se usa Composition
Cuando se elimina el "setup" se usa Options API, y se tiene que exportar el componente:
  export default {
    components: {
      Header
    }
  };

Options recomendado para principantes, experiencia con lenguajes orientados a objetos, si su proyexto usará pequeñas piezas de vue
Composition recomendado si todo el proyecto será hecho con VUE.js

-Eventos en VUE
Se agregan con la directiva v-on: evento, también con un @evento

-State en VUE
estado de la aplicación
Se manejan con ref y rective, ambos se importan desde vue
ref toma valores primitivos
reactive toma objetos
En un equipo de trabajo o proyecto grande se recomienda administras el state con una herramienta llamada Pinia(sustituto de VueX)

-Computed Properties
Para un código más ordenado, seguir actualizaciones
Un computed property es una funcion, está pendiente a los cambios de tu state y realiza los cambios necesarios cuandon este cambia.

Con los Computed Properties podemos revisar los valores derivados de una función; pero algunas veces queremos modificar algo extra cuando algún state cambia, con composition API puedes utilizar la funcion watch para lograrlo

-Watchers
Un watch tomará una o múltiples dependencias y cuando estas cambien entonces podremos llamar otra función o realizar una validación